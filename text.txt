
# .env file template
"""
# Create this file in your project root
SECRET_KEY=your-django-secret-key-here
DEBUG=True
GEMINI_API_KEY=your-gemini-api-key-here
"""

 decouple import config

def setup_environment():
    # Check if .env file exists
    if not os.path.exists('.env'):
        print("Creating .env file...")
        with open('.env', 'w') as f:
            f.write("SECRET_KEY=your-django-secret-key-here\n")
            f.write("DEBUG=True\n")
            f.write("GEMINI_API_KEY=your-gemini-api-key-here\n")
        print("Please update the .env file with your actual API keys")

    # Check Gemini API key
    api_key = config('GEMINI_API_KEY', default='')
    if not api_key or api_key == 'your-gemini-api-key-here':
        print("⚠️  Please set your GEMINI_API_KEY in the .env file")
        print("Get your API key from: https://makersuite.google.com/app/apikey")
    else:
        print("✅ Environment setup complete!")

if __name__ == "__main__":
    setup_environment()
"""

# templates/waste_classifier/results.html

# templates/waste_classifier/history.html
"""

"""

# templates/waste_classifier/detail.html
"""

"""

# Django management commands
# management/commands/test_gemini.py
"""
from django.core.management.base import BaseCommand
from waste_classifier.gemini_service import GeminiWasteAnalyzer
from django.conf import settings
import tempfile
import requests
from PIL import Image

class Command(BaseCommand):
    help = 'Test Gemini API connection and functionality'

    def add_arguments(self, parser):
        parser.add_argument(
            '--image-url',
            type=str,
            help='URL of test image to analyze',
            default='https://example.com/sample-waste.jpg'
        )
        parser.add_argument(
            '--state',
            type=str,
            help='State code to test',
            default='MH'
        )

    def handle(self, *args, **options):
        if not settings.GEMINI_API_KEY or settings.GEMINI_API_KEY == 'your-gemini-api-key-here':
            self.stdout.write(
                self.style.ERROR('GEMINI_API_KEY not set. Please update your .env file')
            )
            return

        try:
            analyzer = GeminiWasteAnalyzer()
            self.stdout.write('✅ Gemini API initialized successfully')

            # Test with sample image if URL provided
            image_url = options['image_url']
            state = options['state']

            if image_url and image_url != 'https://example.com/sample-waste.jpg':
                self.stdout.write(f'Testing with image: {image_url}')
                self.stdout.write(f'State: {analyzer.get_state_name_from_code(state)}')

                # This would require downloading and testing with actual image
                self.stdout.write('Image testing requires manual implementation')

            self.stdout.write(
                self.style.SUCCESS('Gemini API connection test completed')
            )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Gemini API test failed: {str(e)}')
            )
"""

# Installation and setup documentation
# INSTALLATION.md
"""
# Smart Waste Management System - Installation Guide

## Prerequisites

1. Python 3.8+ installed on your system
2. pip package manager
3. Virtual environment (recommended)
4. Google Gemini API key

## Step-by-Step Installation

### 1. Clone or Create Project Directory
```bash
mkdir waste_management_system
cd waste_management_system
```

### 2. Create Virtual Environment
```bash
python -m venv waste_env

# Activate virtual environment
# On Windows:
waste_env\\Scripts\\activate
# On macOS/Linux:
source waste_env/bin/activate
```

### 3. Install Dependencies
Create requirements.txt and install:
```bash
pip install -r requirements.txt
```

### 4. Get Gemini API Key
1. Visit https://makersuite.google.com/app/apikey
2. Sign in with your Google account
3. Create a new API key
4. Copy the API key

### 5. Environment Configuration
Create `.env` file in project root:
```
SECRET_KEY=your-django-secret-key-here
DEBUG=True
GEMINI_API_KEY=your-actual-gemini-api-key-here
```

Generate Django secret key:
```bash
python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
```

### 6. Database Setup
```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
```

### 7. Create Static and Media Directories
```bash
mkdir static
mkdir media
mkdir media/waste_images
```

### 8. Test Installation
```bash
# Test Gemini API connection
python manage.py test_gemini

# Run development server
python manage.py runserver
```

Visit http://127.0.0.1:8000 to see the application.

## API Testing

### Using Python requests:
```python
import requests

# Test API endpoint
url = 'http://127.0.0.1:8000/api/analyze/'
files = {'image': open('test_image.jpg', 'rb')}
data = {'state': 'MH'}

response = requests.post(url, files=files, data=data)
print(response.json())
```

### Using cURL:
```bash
curl -X POST \\
  http://127.0.0.1:8000/api/analyze/ \\
  -F 'image=@test_image.jpg' \\
  -F 'state=MH'
```

## Production Deployment

### 1. Environment Variables for Production
```
SECRET_KEY=your-production-secret-key
DEBUG=False
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
GEMINI_API_KEY=your-gemini-api-key
```

### 2. Install Production Dependencies
```bash
pip install gunicorn whitenoise
```

### 3. Update settings.py for Production
Add to MIDDLEWARE:
```python
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this
    # ... other middleware
]
```

### 4. Collect Static Files
```bash
python manage.py collectstatic --noinput
```

### 5. Run with Gunicorn
```bash
gunicorn waste_management.wsgi:application --bind 0.0.0.0:8000
```

## Troubleshooting

### Common Issues:

1. **Gemini API Key Error**
   - Ensure API key is correctly set in .env file
   - Verify API key has proper permissions
   - Check quota limits

2. **Image Upload Issues**
   - Ensure media directory exists and is writable
   - Check file size limits (default: 10MB)
   - Verify supported formats: JPG, PNG, BMP, WebP

3. **Database Errors**
   - Run migrations: `python manage.py migrate`
   - Check database permissions

4. **Static Files Not Loading**
   - Run: `python manage.py collectstatic`
   - Check STATIC_URL and STATIC_ROOT settings

## Features Included

✅ AI-powered waste classification using Gemini Vision API
✅ State-specific Indian waste management laws
✅ Comprehensive risk assessment and safety guidelines
✅ Responsive web interface with Bootstrap 5
✅ RESTful API for integration
✅ Admin panel for management
✅ Image upload with drag-and-drop
✅ Classification history tracking
✅ Detailed analysis reports

## Next Steps

1. **Customize for Your Needs**: Modify waste categories, add local regulations
2. **Enhance UI**: Add more interactive features, charts, statistics
3. **Mobile App**: Use the API to build mobile applications
4. **Integration**: Connect with waste management systems, IoT devices
5. **Analytics**: Add usage analytics, waste pattern analysis
"""
